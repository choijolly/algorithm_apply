#include <stdio.h>

#define MAX 10
#define MAX_NODE 100


int GM[MAX_NODE][MAX_NODE];  // 인접 행렬 그래프
int stack[MAX];              // 스택
int top;                     // 스택의 top
int check[MAX_NODE];         // 방문 체크 배열



void init_stack(void) {
    top = -1;
}


int stack_empty() {
    return top == -1;
}


int push(int t) {
    if (top >= MAX - 1) {
        printf("Stack overflow !!!\n");
        return -1;
    }
    stack[++top] = t;
    return t;
}



int pop() {
    if (top < 0) {
        printf("Stack underflow!!!\n");
        return -1;
    }
    return stack[top--];
}


int name2int(char c) {
    return c - 'A';
}


char int2name(int i) {
    return i + 'A';
}


void visit(int v) {
    printf("\nvisited : %c ", int2name(v));
}

void input_adjmatrix(int a[][MAX_NODE], int* V, int* E) {
    char vertex[3];
    int i, j, k;

    printf("\nInput number of nodes & edges: ");
    scanf_s("%d %d", V, E);

    // 인접 행렬 초기화
    for (i = 0; i < *V; i++) {
        for (j = 0; j < *V; j++) {
            a[i][j] = 0;
        }
    }

    // 대각 행렬은 1
    for (i = 0; i < *V; i++) {
        a[i][i] = 1;
    }

    // 간선 정보 입력
    for (k = 0; k < *E; k++) {
        printf("\nInput two nodes consisting of an edge (e.g., AB): ");
        scanf_s("%2s", vertex, (unsigned)sizeof(vertex));

        i = name2int(vertex[0]);
        j = name2int(vertex[1]);

        a[i][j] = 1;
        a[j][i] = 1;
    }
}

void print_adjmatrix(int a[][MAX_NODE], int* V) {
    int i, j;

    printf("    ");
    for (i = 0; i < *V; i++) {
        printf("%4c", int2name(i));
    }
    printf("\n");

    for (i = 0; i < *V; i++) {
        printf("%4c", int2name(i));
        for (j = 0; j < *V; j++) {
            printf("%4d", a[i][j]);
        }
        printf("\n");
    }
}

void nrDFS_adjmatrix(int a[][MAX_NODE], int V) {
    int i, j;
    init_stack();

    //check 배열을 초기화
    for (i = 0; i < V; i++) {
        check[i] = 0;
    }

    for (i = 0; i < V; i++) {
        if (check[i] == 0) {
            push(i);
            check[i] = 1;

            while (!stack_empty()) {
                i = pop();
                visit(i);

                for (j = 0; j < V; j++) {
                    if (a[i][j] != 0 && check[j] == 0) {
                        push(j);
                        check[j] = 1;
                    }
                }
            }
        }
    }
}

int main() {
    int V, E;

    input_adjmatrix(GM, &V, &E);
    print_adjmatrix(GM, &V);

    nrDFS_adjmatrix(GM, V);

    return 0;
}
