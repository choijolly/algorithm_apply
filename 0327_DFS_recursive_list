#include<stdio.h>
#include <stdlib.h>
#define MAX_NODE 100



typedef struct _node {
    int vertex;
    struct _node* next;
}node;

node* GL[MAX_NODE];
int check[MAX_NODE];


int name2int(char c) {
    return c - 'A';
}

char int2name(int i) {
    return i + 'A';
}

void visit(int v) {
    printf("\nvisited : %c ", int2name(v));
}


void input_adjlist(node* a[], int* V, int* E) {

    char vertex[4];
    int i, j;
    node* t;

    printf("Input number of node & edge : ");
    scanf_s("%d %d", V, E);



    for (i = 0; i < *V; i++)
        a[i] = NULL;


    for (j = 0; j < *E; j++) {
        printf("Input two node consist of edge : ");
        scanf_s("%3s", vertex, (unsigned)vertex);


        i = name2int(vertex[0]);
        t = (node*)malloc(sizeof(node));
        t->vertex = name2int(vertex[1]);
        t->next = a[i];
        a[i] = t;


        i = name2int(vertex[1]);
        t = (node*)malloc(sizeof(node));
        t->vertex = name2int(vertex[0]);
        t->next = a[i];
        a[i] = t;
    }
}

void print_adjlist(node* a[], int V)

{

    int i, j;
    printf("\n");

    for (i = 0; i < V; i++) {
        printf("%3c", int2name(i));

        while (a[i] != NULL) {
            printf("%3c", int2name(a[i]->vertex));
            a[i] = a[i]->next;
        }

        printf("\n");

    }

}

void DFS_recur_list(node* a[], int V, int i) {
    node* t;
    check[i] = 1;
    visit(i);

    for (t = a[i]; t != NULL; t = t->next) {
        if (check[t->vertex] == 0) {
            DFS_recur_list(a, V, t->vertex);
        }
    }
}

void DFS_adjlist(node* a[], int V) {
    int i;
    for (i = 0; i < V; i++) {
        check[i] = 0;
    }

    for (i = 0; i < V; i++) {   //하나의 그래프일 경우에 상관없지만 여러개일 경우 고려
        if (check[i] == 0) {
            DFS_recur_list(a, V, i);
        }
    }
}


void main()
{
    int V, E;
    input_adjlist(GL, &V, &E);
    print_adjlist(GL, V);

    DFS_adjlist(GL, V);
}
