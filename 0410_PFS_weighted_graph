#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_NODE 100
#define UNSEEN (-INT_MAX)

typedef struct node {
    int vertex;
    int weight;
    struct node* next;
} node;

node* G[MAX_NODE];
int check[MAX_NODE];
int parent[MAX_NODE];
FILE* fp;
int nheap = 0;
int heap[MAX_NODE];

void pq_init() { nheap = 0; }

int pq_update(int h[], int v, int p);
void upheap(int h[], int k);
void downheap(int h[], int k);
void adjust_heap(int h[], int n);
void print_heap(int h[]);
void input_adjlist(node* g[], int* V, int* E);
void print_adjlist(node* g[], int V);
int pq_extract(int h[]);
char int2name(int i);
int name2int(char c);
void print_cost(int c[], int V);

void visit(int i) {
    printf(" %c", int2name(i));
}

int name2int(char c) {
    return c - 'A';
}

char int2name(int i) {
    return 'A' + i;
}

void print_tree(int p[], int V) {
    int i;
    printf("\nMST Tree Edges:\n");
    for (i = 0; i < V; i++) {
        if (p[i] != -1) {
            printf("%c - %c\n", int2name(p[i]), int2name(i));
        }
    }
}

void print_cost(int c[], int V) {
    int i, total = 0;
    for (i = 0; i < V; i++) {
        if (c[i] != UNSEEN) {
            total += -c[i];  // 가중치가 음수로 저장됨 (최소 힙을 위해)
        }
    }
    printf("Total Cost: %d\n", total);
}

void PFS_adjlist(node* g[], int V) {
    int i;
    node* t;
    pq_init();
    for (i = 0; i < V; i++) {
        check[i] = UNSEEN;
        parent[i] = 0;
    }
    for (i = 0; i < V; i++) {
        if (check[i] == UNSEEN) {
            parent[i] = -1;
            pq_update(heap, i, UNSEEN);
            while (!pq_empty()) {
                print_heap(heap);
                i = pq_extract(heap);  // 요청대로 유지
                check[i] = -check[i];
                visit(i);
                for (t = g[i]; t != NULL; t = t->next) {
                    if (check[t->vertex] < 0) {
                        if (pq_update(heap, t->vertex, -t->weight)) {
                            parent[t->vertex] = i;
                        }
                    }
                }
            }
        }
    }
}

int pq_update(int h[], int v, int p) {
    if (check[v] == UNSEEN) {
        h[++nheap] = v;
        check[v] = p;
        upheap(h, nheap);
        return 1;
    }
    else {
        if (check[v] < p) {
            check[v] = p;
            adjust_heap(h, nheap);
            return 1;
        }
        return 0;
    }
}

void upheap(int h[], int k) {
    int v = h[k];
    while (k > 1 && check[h[k / 2]] <= check[v]) {
        h[k] = h[k / 2];
        k /= 2;
    }
    h[k] = v;
}

void downheap(int h[], int k) {
    int i;
    int v = h[k];
    while (k <= nheap / 2) {
        i = k << 1;
        if (i < nheap && check[h[i]] < check[h[i + 1]]) i++;
        if (check[v] >= check[h[i]]) break;
        h[k] = h[i];
        k = i;
    }
    h[k] = v;
}

void adjust_heap(int h[], int n) {
    int k;
    for (k = n / 2; k >= 1; k--) {
        downheap(h, k);
    }
}

int pq_empty() {
    return nheap == 0;
}

int pq_extract(int h[]) {
    int v = h[1];
    h[1] = h[nheap--];
    downheap(h, 1);
    return v;
}

void input_adjlist(node* g[], int* V, int* E) {
    char vertex[3];
    int i, j, w;
    node* t;

    printf("Input number of nodes and edges\n");
    fscanf(fp, "%d %d", V, E);

    for (i = 0; i < *V; i++) {
        g[i] = NULL;
    }

    printf("\nInput two nodes consisting of edges and its weight -->\n");
    for (j = 0; j < *E; j++) {
        fscanf(fp, "%s %d", vertex, &w);

        i = name2int(vertex[0]);
        t = (node*)malloc(sizeof(node));
        t->vertex = name2int(vertex[1]);
        t->weight = w;
        t->next = g[i];
        g[i] = t;

        i = name2int(vertex[1]);
        t = (node*)malloc(sizeof(node));
        t->vertex = name2int(vertex[0]);
        t->weight = w;
        t->next = g[i];
        g[i] = t;
    }
}

void print_adjlist(node* g[], int V) {
    int i;
    node* t;
    for (i = 0; i < V; i++) {
        printf("\n %c : ", int2name(i));
        for (t = g[i]; t != NULL; t = t->next) {
            printf("-> %c: %d ", int2name(t->vertex), t->weight);
        }
    }
    printf("\n");
}

void print_heap(int h[]) {
    int i;
    printf("\nHeap: ");
    for (i = 1; i <= nheap; i++) {
        printf("%c: %d ", int2name(h[i]), check[h[i]]);
    }
    printf("\n");
}

int main() {
    int V, E;
    fp = fopen("C:\\Users\\미경\\Downloads\\graph.txt", "rt");

    if (fp == NULL) {
        printf("파일을 열 수 없습니다.\n");
        return 1;
    }

    input_adjlist(G, &V, &E);
    printf("\nOriginal graph\n");
    print_adjlist(G, V);
    printf("\nVisit order of Minimum Spanning Tree\n");
    PFS_adjlist(G, V);
    print_tree(parent, V);
    printf("\nMinimum Cost is \n");
    print_cost(check, V);

    fclose(fp);
    return 0;
}
