#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

#define MAX_NODE 100
#define MAX 100

// 인접 리스트 노드 구조체
typedef struct _node {
    int vertex;
    int weight;
    struct _node* next;
} node;

// 진입 차수 및 연결 리스트 헤더
typedef struct _head {
    int count;
    node* next;
} head;

// 전역 변수
int top;
int stack[MAX];
int check[MAX_NODE];
node* GL[MAX_NODE];             // 입력용 인접 리스트
head network[MAX_NODE];         // AOE 분석용 네트워크
int earliest[MAX_NODE];         // 가장 빠른 시작 시간
int latest[MAX_NODE];           // 가장 늦은 시작 시간
FILE* fp;

// 스택 함수
void init_stack(void) { top = -1; }
int stack_empty(void) { return top == -1; }
int push(int t) {
    if (top >= MAX - 1) return -1;
    return stack[++top] = t;
}
int pop(void) {
    if (top < 0) return -1;
    return stack[top--];
}

// 문자 ↔ 숫자 변환
int name2int(char c) { return c - 'A'; }
char int2name(int i) { return (char)(i + 'A'); }

// 인접 리스트 입력
void input_adjlist(node* a[], int* V, int* E) {
    char vertex[4];
    int i, j, w;
    node* t;

    if (fscanf(fp, "%d %d", V, E) != 2) {
        fprintf(stderr, "파일에서 V, E 읽기 실패\n");
        exit(1);
    }

    for (i = 0; i < *V; i++) a[i] = NULL;

    for (j = 0; j < *E; j++) {
        if (fscanf(fp, "%3s %d", vertex, &w) != 2) {
            fprintf(stderr, "간선 정보 읽기 실패 (행 %d)\n", j + 1);
            exit(1);
        }
        i = name2int(vertex[0]);
        t = (node*)malloc(sizeof(node));
        t->vertex = name2int(vertex[1]);
        t->weight = w;
        t->next = a[i];
        a[i] = t;
    }
}

// Forward Pass (earliest time 계산)
void forward_state(head net[], int V) {
    int i, j, k;
    node* ptr;
    init_stack();
    // 진입 차수 세팅
    for (i = 0; i < V; i++) net[i].count = 0;
    for (j = 0; j < V; j++)
        for (ptr = net[j].next; ptr; ptr = ptr->next)
            net[ptr->vertex].count++;

    for (i = 0; i < V; i++) earliest[i] = 0;
    for (i = 0; i < V; i++)
        if (net[i].count == 0) push(i);

    while (!stack_empty()) {
        j = pop();
        for (ptr = net[j].next; ptr; ptr = ptr->next) {
            k = ptr->vertex;
            if (--net[k].count == 0)
                push(k);
            if (earliest[k] < earliest[j] + ptr->weight)
                earliest[k] = earliest[j] + ptr->weight;
        }
    }
}

// Backward Pass (latest time 계산)
void backward_state(head net[], int V) {
    int i, j, k, l;
    node* ptr;
    init_stack();
    // 진출 차수 세팅
    for (i = 0; i < V; i++) {
        net[i].count = 0;
        for (ptr = net[i].next; ptr; ptr = ptr->next)
            net[i].count++;
    }

    for (i = 0; i < V; i++) latest[i] = earliest[V - 1];
    for (i = 0; i < V; i++)
        if (net[i].count == 0) push(i);

    while (!stack_empty()) {
        j = pop();
        for (l = 0; l < V; l++) {
            for (ptr = net[l].next; ptr; ptr = ptr->next) {
                if (ptr->vertex == j) {
                    k = l;
                    if (--net[k].count == 0)
                        push(k);
                    if (latest[k] > latest[j] - ptr->weight)
                        latest[k] = latest[j] - ptr->weight;
                }
            }
        }
    }
}

// Professor's print_critical_activity 함수 통합
void print_critical_activity(head net[], int V) {
    int i, e, l;
    node* t;

    printf("\n--- Critical Activities ---\n");
    printf("Edge     Early   Late   Late-Early   Critical?\n");
    printf("----     -----   ----   ----------   --------\n");

    for (i = 0; i < V; i++) {
        for (t = net[i].next; t; t = t->next) {
            e = earliest[i];
            l = latest[t->vertex] - t->weight;
            printf("<%c %c>    %-5d %-5d %-10d %s\n",
                int2name(i), int2name(t->vertex),
                e, l, (l - e),
                (e == l) ? "Yes" : "No");
        }
    }
}

int main(void) {
    int V, E, k;

    // 파일 열기 (경로 확인)
    fp = fopen("C:\\Users\\미경\\Downloads\\graph_AOE.txt", "r");
    if (!fp) {
        perror("파일 열기 실패");
        return 1;
    }

    // 입력 및 네트워크 구성
    input_adjlist(GL, &V, &E);
    for (k = 0; k < V; k++)
        network[k].next = GL[k];

    // 시간 계산
    forward_state(network, V);
    backward_state(network, V);

    // 결과 출력
    print_critical_activity(network, V);

    fclose(fp);
    return 0;
}
