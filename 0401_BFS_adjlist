#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 10
#define MAX_NODE 100

typedef struct node {
    int vertex;
    struct node* next;
} node;

typedef struct _dnode {
    int key;
    struct _dnode* prev;
    struct _dnode* next;
} dnode;

// Global variables
int GM[MAX_NODE][MAX_NODE];
node* GL[MAX_NODE];
int stack[MAX];
int check[MAX_NODE];
int top;
dnode* head, * tail;

// Utility functions
int name2int(char c) { return c - 'A'; }
char int2name(int i) { return i + 'A'; }

// Input functions
void input_adjmatrix(int a[][MAX_NODE], int* V, int* E) {
    char vertex[3];
    int i, j, k;
    printf("\nInput number of node & edge \n");
    scanf("%d %d", V, E);

    for (i = 0; i < *V; i++)
        for (j = 0; j < *V; j++)
            a[i][j] = 0;

    for (i = 0; i < *V; i++)
        a[i][i] = 1;

    printf("\nInput two nodes consisting edge\n");
    for (k = 0; k < *E; k++) {
        scanf("%s", vertex);
        i = name2int(vertex[0]);
        j = name2int(vertex[1]);
        a[i][j] = 1;
        a[j][i] = 1;
    }
}

void print_adjmatrix(int a[][MAX_NODE], int V) {
    int i, j;
    printf("   ");
    for (i = 0; i < V; i++)
        printf("%3c", int2name(i));
    printf("\n");
    for (i = 0; i < V; i++) {
        printf("%3c", int2name(i));
        for (j = 0; j < V; j++)
            printf("%3d", a[i][j]);
        printf("\n");
    }
}

void input_adjlist(node* a[], int* V, int* E) {
    char vertex[3];
    int i, j;
    node* t;
    printf("\nInput number of node & edge\n");
    scanf("%d %d", V, E);
    for (i = 0; i < *V; i++) a[i] = NULL;

    for (j = 0; j < *E; j++) {
        printf("\nInput two node consisting edge\n");
        scanf("%s", vertex);

        i = name2int(vertex[0]);
        t = (node*)malloc(sizeof(node));
        t->vertex = name2int(vertex[1]);
        t->next = a[i];
        a[i] = t;

        i = name2int(vertex[1]);
        t = (node*)malloc(sizeof(node));
        t->vertex = name2int(vertex[0]);
        t->next = a[i];
        a[i] = t;
    }
}

void print_adjlist(node* a[], int V) {
    int i;
    for (i = 0; i < V; i++) {
        printf("%3c", int2name(i));
        while (a[i] != NULL) {
            printf("%3c", int2name(a[i]->vertex));
            a[i] = a[i]->next;
        }
        printf("\n");
    }
}

// Stack operations
int pop() {
    if (top < 0) {
        printf("Stack underflow\n");
        return -1;
    }
    return stack[top--];
}

int push(int t) {
    if (top >= MAX - 1) {
        printf("Stack overflow\n");
        return -1;
    }
    stack[++top] = t;
    return t;
}

int stack_empty() { return top < 0; }
void init_stack() { top = -1; }

// Queue operations
void init_queue() {
    head = (dnode*)calloc(1, sizeof(dnode));
    tail = (dnode*)calloc(1, sizeof(dnode));
    head->prev = head;
    head->next = tail;
    tail->prev = head;
    tail->next = tail;
}

int put(int k) {
    dnode* t;
    if ((t = (dnode*)malloc(sizeof(dnode))) == NULL) {
        printf("Out of memory !\n");
        return -1;
    }
    t->key = k;
    tail->prev->next = t;
    t->prev = tail->prev;
    tail->prev = t;
    t->next = tail;
    return k;
}

int get() {
    dnode* t;
    int k;
    t = head->next;
    if (t == tail) {
        printf("Queue underflow\n");
        return -1;
    }
    k = t->key;
    head->next = t->next;
    t->next->prev = head;
    free(t);
    return k;
}

int queue_empty() {
    return head->next == tail;
}

// DFS/BFS
void visit(int i) { printf("%c\n", int2name(i)); }

void DFS_recur_matrix(int a[][MAX_NODE], int V, int i) {
    int j;
    check[i] = 1;
    visit(i);
    for (j = 0; j < V; j++)
        if (a[i][j] != 0 && check[j] == 0)
            DFS_recur_matrix(a, V, j);
}

void DFS_adjmatrix(int a[][MAX_NODE], int V) {
    int i;
    for (i = 0; i < V; i++) check[i] = 0;
    for (i = 0; i < V; i++)
        if (check[i] == 0)
            DFS_recur_matrix(a, V, i);
}

void nrDFS_adjmatrix(int a[][MAX_NODE], int V) {
    int i, j;
    init_stack();
    for (i = 0; i < V; i++) check[i] = 0;
    for (i = 0; i < V; i++) {
        if (check[i] == 0) {
            push(i);
            check[i] = 1;
            while (!stack_empty()) {
                i = pop();
                visit(i);
                for (j = 0; j < V; j++)
                    if (a[i][j] != 0 && check[j] == 0) {
                        push(j);
                        check[j] = 1;
                    }
            }
        }
    }
}

void DFS_recur_list(node* a[], int V, int i) {
    node* t;
    check[i] = 1;
    visit(i);
    for (t = a[i]; t != NULL; t = t->next)
        if (check[t->vertex] == 0)
            DFS_recur_list(a, V, t->vertex);
}

void DFS_adjlist(node* a[], int V) {
    int i;
    for (i = 0; i < V; i++) check[i] = 0;
    for (i = 0; i < V; i++)
        if (check[i] == 0)
            DFS_recur_list(a, V, i);
}

void nrDFS_adjlist(node* a[], int V) {
    int i, j;
    node* t;
    init_stack();
    for (i = 0; i < V; i++) check[i] = 0;
    for (i = 0; i < V; i++) {
        if (check[i] == 0) {
            push(i);
            check[i] = 1;
            while (!stack_empty()) {
                i = pop();
                visit(i);
                for (t = a[i]; t != NULL; t = t->next) {
                    push(t->vertex);
                    j = t->vertex;
                    check[j] = 1;
                }
            }
        }
    }
}

void BFS_adjmatrix(int a[][MAX_NODE], int V) {
    int i, j;
    init_queue();
    for (i = 0; i < V; i++) check[i] = 0;
    for (i = 0; i < V; i++) {
        if (check[i] == 0) {
            put(i);
            check[i] = 1;
            while (!queue_empty()) {
                i = get();
                visit(i);
                for (j = 0; j < V; j++)
                    if (a[i][j] != 0)
                        if (check[j] == 0) {
                            put(j);
                            check[j] = 1;
                        }
            }
        }
    }
}

void BFS_adjlist(node* a[], int V) {
    int i;
    node* t;
    init_queue();
    for (i = 0; i < V; i++) check[i] = 0;
    for (i = 0; i < V; i++) {
        if (check[i] == 0) {
            put(i);
            check[i] = 1;
            while (!queue_empty()) {
                i = get();
                visit(i);
                for (t = a[i]; t != NULL; t = t->next)
                    if (check[t->vertex] == 0) {
                        put(t->vertex);
                        check[t->vertex] = 1;
                    }
            }
        }
    }
}

void count_components(int a[][MAX_NODE], int V) {
    int cnt = 0;
    int i, j;
    init_stack();
    for (i = 0; i < V; i++) check[i] = 0;
    for (i = 0; i < V; i++) {
        if (check[i] == 0) {
            ++cnt;
            push(i);
            check[i] = 1;
            while (!stack_empty()) {
                i = pop();
                printf("%c ", int2name(i));
                for (j = 0; j < V; j++) {
                    if (a[i][j] != 0)
                        if (check[j] == 0) {
                            push(j);
                            check[j] = 1;
                        }
                }
            }
        }
    }
    printf("# of CC : %d\n", cnt);
}

// Main function
int main() {
    int V, E;

    input_adjmatrix(GL, &V, &E);
    print_adjmatrix(GM, V);
    count_components(GL, V);

    return 0;
}
