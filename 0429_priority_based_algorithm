#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_NODE 100
#define UNSEEN (-INT_MAX)

typedef struct node {
    int vertex;
    int weight;
    struct node* next;
} node;

// 전역 변수
node* G[MAX_NODE];
int heap[MAX_NODE];
int check[MAX_NODE];
int parent[MAX_NODE];
int root[MAX_NODE];       // 경로 출력용
int nheap = 0;
FILE* fp;

// 함수 선언
int name2int(char c);
char int2name(int i);
void input_adjlist(node* g[], int* V, int* E);
void print_adjlist(node* g[], int V);
void pq_init(void);
int pq_empty(void);
int pq_update(int h[], int v, int p);
void upheap(int h[], int k);
void adjust_heap(int h[], int n);
int pq_extract(int h[]);
void downheap(int h[], int k);
void visit(int i);
void shortest_adjlist(node* g[], int start, int V);
void print_short_cost(int startpoint, int endpoint);

// ========================== 그래프 입력 ==============================

void input_adjlist(node* g[], int* V, int* E) {
    char vertex[3];
    int i, j, w;
    node* t;

    fscanf(fp, "%d %d", V, E);
    for (i = 0; i < *V; i++) g[i] = NULL;

    for (j = 0; j < *E; j++) {
        fscanf(fp, "%s %d", vertex, &w);

        t = (node*)malloc(sizeof(node));
        t->vertex = name2int(vertex[1]);
        t->weight = w;
        t->next = g[name2int(vertex[0])];
        g[name2int(vertex[0])] = t;

        t = (node*)malloc(sizeof(node));
        t->vertex = name2int(vertex[0]);
        t->weight = w;
        t->next = g[name2int(vertex[1])];
        g[name2int(vertex[1])] = t;
    }
}

void print_adjlist(node* g[], int V) {
    for (int i = 0; i < V; i++) {
        printf("%c", int2name(i));
        for (node* t = g[i]; t != NULL; t = t->next)
            printf(" -> %c:%d", int2name(t->vertex), t->weight);
        printf("\n");
    }
}

// =========================== 힙 관련 ===============================

void pq_init(void) { nheap = 0; }

int pq_empty(void) { return nheap == 0; }

int pq_update(int h[], int v, int p) {
    if (check[v] == UNSEEN) {
        h[++nheap] = v;
        check[v] = p;
        upheap(h, nheap);
        return 1;
    }
    else if (check[v] < p) {
        check[v] = p;
        adjust_heap(h, nheap);
        return 1;
    }
    return 0;
}

void upheap(int h[], int k) {
    int v = h[k];
    while (k > 1 && check[h[k / 2]] <= check[v]) {
        h[k] = h[k / 2];
        k /= 2;
    }
    h[k] = v;
}

void adjust_heap(int h[], int n) {
    for (int k = n / 2; k >= 1; k--)
        downheap(h, k);
}

int pq_extract(int h[]) {
    int v = h[1];
    h[1] = h[nheap--];
    downheap(h, 1);
    return v;
}

void downheap(int h[], int k) {
    int i, v = h[k];
    while (k <= nheap / 2) {
        i = k * 2;
        if (i < nheap && check[h[i]] < check[h[i + 1]])
            i++;
        if (check[v] >= check[h[i]]) break;
        h[k] = h[i];
        k = i;
    }
    h[k] = v;
}

// =========================== 알고리즘 ==============================

void shortest_adjlist(node* g[], int start, int V) {
    pq_init();
    for (int i = 0; i < V; i++) {
        check[i] = UNSEEN;
        parent[i] = -1;
    }

    pq_update(heap, start, 0);  // 시작점 우선순위 큐에 추가

    while (!pq_empty()) {
        int curr = pq_extract(heap);
        check[curr] = -check[curr];  // 방문 처리
        visit(curr);

        for (node* t = g[curr]; t != NULL; t = t->next) {
            if (check[t->vertex] < 0) {
                int new_cost = -check[curr] - t->weight;
                if (pq_update(heap, t->vertex, new_cost))
                    parent[t->vertex] = curr;
            }
        }
    }

    printf("\n");
}

void print_short_cost(int startpoint, int endpoint) {
    int path[MAX_NODE];
    int idx = 0, total = 0;
    int i = endpoint;

    if (parent[i] == -1) {
        printf("경로가 존재하지 않습니다.\n");
        return;
    }

    // 경로 추적 (뒤에서부터 저장)
    while (i != startpoint && i != -1) {
        path[idx++] = i;
        i = parent[i];
    }
    path[idx++] = startpoint;

    // 경로 출력 (앞에서부터)
    printf("\n최단 경로: ");
    for (int j = idx - 1; j >= 0; j--) {
        printf("%c", int2name(path[j]));
        if (j != 0) printf(" -> ");
    }

    // 비용 출력
    total = -check[endpoint];
    printf("\n최소 비용: %d\n", total);
}

// ========================== 유틸리티 ==============================

int name2int(char c) { return c - 'A'; }

char int2name(int i) { return 'A' + i; }

void visit(int i) { printf(" -> %c ", int2name(i)); }

// =========================== main ================================

int main(void) {
    int V, E;
    char startchar, endchar;
    int startpoint, endpoint;

    fp = fopen("C:\\Users\\미경\\Downloads\\graph.txt", "rt");
    if (fp == NULL) {
        printf("파일을 열 수 없습니다.\n");
        return 1;
    }

    input_adjlist(G, &V, &E);
    printf("\nOriginal graph:\n");
    print_adjlist(G, V);

    printf("\nStart and End point (ex: A E): ");
    scanf(" %c %c", &startchar, &endchar);
    startpoint = name2int(startchar);
    endpoint = name2int(endchar);

    printf("\n--- Shortest Path Search ---\n");
    shortest_adjlist(G, startpoint, V);
    print_short_cost(startpoint, endpoint);

    fclose(fp);
    return 0;
}
