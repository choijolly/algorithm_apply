#include <stdio.h>

#define MAX 10
#define MAX_NODE 100


int GM[MAX_NODE][MAX_NODE];  // 인접 행렬 그래프
int stack[MAX];              // 스택
int top;                     // 스택의 top
int check[MAX_NODE];         // 방문 체크 배열



void init_stack(void) {
    top = -1;
}


int stack_empty() {
    return top == -1;
}


int push(int t) {
    if (top >= MAX - 1) {
        printf("Stack overflow !!!\n");
        return -1;
    }
    stack[++top] = t;
    return t;
}



int pop() {
    if (top < 0) {
        printf("Stack underflow!!!\n");
        return -1;
    }
    return stack[top--];
}


int name2int(char c) {
    return c - 'A';
}


char int2name(int i) {
    return i + 'A';
}


void visit(int v) {
    printf("\nvisited : %c ", int2name(v));
}

void input_adjmatrix_floyd(int g[][MAX_NODE], int* V, int* E) {
    char vertex[3];
    int i, j, k;
    int weight = 0;

    printf("\nInput number of nodes & edges: ");
    scanf_s("%d %d", V, E);

    // 인접 행렬 초기화
    for (i = 0; i < *V; i++) {
        for (j = 0; j < *V; j++) {
            g[i][j] = 9999;
        }
    }

    // 대각 원소는 0
    for (i = 0; i < *V; i++) {
        g[i][i] = 0;
    }

    // 간선 정보 입력
    for (k = 0; k < *E; k++) {
        printf("\nInput two nodes and weight (e.g., AB 3): ");
        scanf_s("%2s %d", vertex, 3, &weight);

        i = name2int(vertex[0]);
        j = name2int(vertex[1]);

        g[i][j] = weight;  // 방향 그래프 기준
    }
}


void print_adjmatrix(int a[][MAX_NODE], int* V) {
    int i, j;

    printf("    ");
    for (i = 0; i < *V; i++) {
        printf("%4c", int2name(i));
    }
    printf("\n");

    for (i = 0; i < *V; i++) {
        printf("%4c", int2name(i));
        for (j = 0; j < *V; j++) {
            printf("%4d", a[i][j]);
        }
        printf("\n");
    }
}



void floyd(int d[][MAX_NODE], int V) {
    int x, y, k;

    for (y = 0; y < V; y++) {
        for (x = 0; x < V; x++) {

            for (k = 0; k < V; k++) {
                if (d[x][y] + d[y][k] < d[x][k])
                    d[x][k] = d[x][y] + d[y][k];
            }
        }
    }
}



int main() {
    int V, E;

    input_adjmatrix_floyd(GM, &V, &E);


    floyd(GM, V);

    print_adjmatrix(GM, &V);
    

    return 0;
}
