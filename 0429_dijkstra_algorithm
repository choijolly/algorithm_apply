#include <stdio.h>
#include <stdlib.h>

#define _CRT_SECURE_NO_WARNINGS
#pragma warning(disable: 4996)

#define MAX_NODE 50
#define INFINITE 1000000  // 충분히 큰 값으로 설정

int G[MAX_NODE][MAX_NODE];  // 인접 행렬 그래프
int check[MAX_NODE];        // 방문 여부
int parent[MAX_NODE];       // 부모 노드
int distance[MAX_NODE];     // 최단 거리

// 문자 → 정수
int name2int(char c) {
    return c - 'A';
}

// 정수 → 문자
char int2name(int i) {
    return i + 'A';
}

FILE* graph;  // 파일 포인터

// 그래프 입력
void input_adjmatrix(int a[][MAX_NODE], int* V, int* E) {
    char vertex[3];
    int w, i, j, k;

    printf("\nInput number of nodes & edges ->\n");
    fscanf(graph, "%d %d", V, E);

    for (i = 0; i < *V; i++)
        for (j = 0; j < *V; j++)
            a[i][j] = INFINITE;

    for (i = 0; i < *V; i++)
        a[i][i] = 0;

    printf("Input two nodes of edge and weight ->\n");
    for (k = 0; k < *E; k++) {
        fscanf(graph, "%s %d", vertex, &w);
        i = name2int(vertex[0]);
        j = name2int(vertex[1]);
        a[i][j] = w;
        a[j][i] = w;
    }
}

// 그래프 출력
void print_adjmatrix(int a[][MAX_NODE], int V) {
    printf("\n   ");
    for (int i = 0; i < V; i++)
        printf("%6c", int2name(i));
    printf("\n");

    for (int i = 0; i < V; i++) {
        printf("%6c", int2name(i));
        for (int j = 0; j < V; j++)
            printf("%6d", a[i][j]);
        printf("\n");
    }
}

// 거리 배열 출력
void print_distance(int distance[],int s,int V) {
    for (int i = 0; i < V; i++)
        printf("%6d", distance[i]);
    printf("\n");
}

// Dijkstra 알고리즘
void dijkstra(int a[][MAX_NODE], int s, int V) {
    int x = 0;
    int i,y, d;
    int checked = 0;

    for (x = 0;x < V;x++) {
        distance[x] = a[s][x];

        if (x != s) parent[x] = s;
    }
    check[s] = 1;
    checked++;

    print_distance(distance, s, V);

    while (checked < V) {
        x = 0;
        while (check[x]) x++;
        
        for (i = x;i < V;i++)
            if (check[i] == 0 && distance[i] < distance[x]) x = i;

        check[x] = 1;
        checked++;

        for (y = 0;y < V;y++) {
            if (x == y || a[x][y] >= INFINITE || check[y]) continue;
            d = distance[x] + a[x][y];

            if (d < distance[y]) {
                    distance[y] = d;
                    parent[y] = x;
		    }
        }
        print_distance(distance, x, V);
    }

}

// 부모 트리 출력
void print_tree(int parent[], int V, int start) {
    printf("\n\nson-parent\n");

    printf("son    ");
    for (int i = 0; i < V; i++)
        printf("%c ", int2name(i));

    printf("\n----------------------------\n");

    printf("parent ");
    for (int i = 0; i < V; i++) {
        if (i == start)
            printf("- ");
        else
            printf("%c ", int2name(parent[i]));
    }
    printf("\n");
}

// 메인 함수
int main() {
    int V, E;
    int start_node = 5;  // 예: 'F'

    graph = fopen("C:/Users/asdzx/Desktop/graph.txt", "rt");
    if (graph == NULL) {
        perror("파일을 열 수 없습니다");
        return 1;
    }


    printf("Original Graph ->\n");
    input_adjmatrix(G, &V, &E);
    print_adjmatrix(G, V);

    printf("\nDijkstra Algorithm ->\n\n");
    dijkstra(G, start_node, V);

    print_tree(parent, V, start_node);

    fclose(graph);
    return 0;
}
