#include <stdio.h>
#include <stdlib.h>
#define MAX_NODE 100
#define MAX 10
int GM[MAX_NODE][MAX_NODE];  // 인접 행렬 그래프
int stack[MAX];              // 스택
int top;                     // 스택의 top
int check[MAX_NODE];         // 방문 체크 배열

void init_stack(void) {
    top = -1;
}


int stack_empty() {
    return top == -1;
}


int push(int t) {
    if (top >= MAX - 1) {
        printf("Stack overflow !!!\n");
        return -1;
    }
    stack[++top] = t;
    return t;
}



int pop() {
    if (top < 0) {
        printf("Stack underflow!!!\n");
        return -1;
    }
    return stack[top--];
}


typedef struct _dnode {
    int key;
    struct _dnode* prev;
    struct _dnode* next;
} dnode;

dnode* head, * tail;

int name2int(char c) {
    return c - 'A';
}

char int2name(int i) {
    return i + 'A';
}

void visit(int v) {
    printf("\nvisited: %c ", int2name(v));
}

void init_queue() {
    head = (dnode*)calloc(1, sizeof(dnode));
    tail = (dnode*)calloc(1, sizeof(dnode));
    head->prev = head;
    head->next = tail;
    tail->prev = head;
    tail->next = tail;
}

int put(int k) {
    dnode* t;
    if ((t = (dnode*)malloc(sizeof(dnode))) == NULL) {
        printf("Out of memory!\n");
        return -1;
    }
    t->key = k;
    tail->prev->next = t;
    t->prev = tail->prev;
    tail->prev = t;
    t->next = tail;
    return k;
}

int get() {
    dnode* t;
    int k;
    t = head->next;
    if (t == tail) {
        printf("Queue underflow\n");
        return -1;
    }
    k = t->key;
    head->next = t->next;
    t->next->prev = head;
    free(t);
    return k;
}

int queue_empty() {
    return head->next == tail;
}

void BFS_adjmatrix(int a[][MAX_NODE], int V) {
    int i, j;
    init_queue();
    for (i = 0; i < V; i++) check[i] = 0;

    for (i = 0; i < V; i++) {
        if (check[i] == 0) {
            put(i);
            check[i] = 1;
            while (!queue_empty()) {
                int node = get();
                visit(node);
                for (j = 0; j < V; j++) {
                    if (a[node][j] != 0 && check[j] == 0) {
                        put(j);
                        check[j] = 1;
                    }
                }
            }
        }
    }
}

void input_adjmatrix(int a[][MAX_NODE], int* V, int* E) {
    char vertex[3];
    int i, j, k;

    printf("\nInput number of nodes & edges: ");
    scanf_s("%d %d", V, E);

    for (i = 0; i < *V; i++) {
        for (j = 0; j < *V; j++) {
            a[i][j] = 0;
        }
    }

    for (i = 0; i < *V; i++) {
        a[i][i] = 1;
    }

    for (k = 0; k < *E; k++) {
        printf("\nInput two nodes consisting of an edge (e.g., AB): ");
        scanf_s("%2s", vertex, (unsigned)sizeof(vertex));

        i = name2int(vertex[0]);
        j = name2int(vertex[1]);

        a[i][j] = 1;
        a[j][i] = 1;
    }
}

void print_adjmatrix(int a[][MAX_NODE], int V) {
    printf("\nAdjacency Matrix:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            printf("%d ", a[i][j]);
        }
        printf("\n");
    }
}

void count_components(int a[][MAX_NODE], int V) {
    int cnt = 0;
    int i, j;
    init_stack();

    for (i = 0; i < V; i++) check[i] = 0;

    for (i = 0; i < V; i++) {
        if (check[i] == 0) {
            cnt++; // 새로운 연결 요소 발견
            push(i);
            check[i] = 1;

            while (!stack_empty()) {
                int node = pop();
                printf(" %c", int2name(node));

                for (j = 0; j < V; j++) {
                    if (a[node][j] != 0 && check[j] == 0) {
                        push(j);
                        check[j] = 1;
                    }
                }
            }
            printf("\n");
        }
    }
    printf("# of CC : %d\n", cnt);
}


int main() {
    int V, E;
    input_adjmatrix(GM, &V, &E);
    //print_adjmatrix(GM, V);

    BFS_adjmatrix(GM, V);
    count_components(GM, V);
    return 0;
}
